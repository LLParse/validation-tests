#!/bin/bash

set -e
set -x

: ${CATTLE_TEST_AGENT_IMAGE:='docker:cattle/test-agent:v7'}
: ${PHANTOMJS_BIN:='/usr/local/bin/phantomjs'}
: ${VALIDATION_JUNIT_XML_FILE:='validationTestsJunit.xml'}

export CATTLE_TEST_AGENT_IMAGE PHANTOMJS_BIN

cd $(dirname $0)/..

if [ -d '/scratch' ]; then
    rm -rf /scratch/*
    rsync -a --delete ./ /scratch
    cd /scratch
fi

build_env()
{
    ./scripts/build-env 
}

teardown_env()
{
    popd
    ./scripts/build-env -d
}

copy_logs(){
    [ ! -f "/scratch/tests/validation/validationTestsJunit.xml" ] && echo Can\'t Find /scratch/tests/validation/validationTestsJunit.xml && return
    [ -f "/scratch/tests/validation/validationTestsJunit.xml" ] && echo Copying /scratch/tests/validation/validationTestsJunit.xml to /target/${VALIDATION_JUNIT_XML_FILE}
    [ -d "/target" ] && cp /scratch/tests/validation/validationTestsJunit.xml /target/${VALIDATION_JUNIT_XML_FILE}
}

run_tests()
{
    pushd ./tests/validation
    tox || [ `uname` == "Linux" ] && copy_logs && exit 1
}

if [ -z "${CATTLE_TEST_URL}" ]; then
    trap "teardown_env" EXIT TERM ERR
    build_env

    export CATTLE_TEST_URL=http://$(gce-10acre-ranch -c cattle-$(id -un) -i):8080
    echo "\nGiving hosts time to register"
    sleep 30
else
    echo "Using set CATTLE_TEST_URL env var: ${CATTLE_TEST_URL} for tests"
fi


run_tests
